import { j as createVNode, F as Fragment, k as spreadAttributes } from './astro.c61b1d12.mjs';
import 'cookie';
import 'kleur/colors';
import 'path-to-regexp';
import 'mime';
import 'string-width';
import 'html-escaper';

const images = {
					
				};

				function updateImageReferences(html) {
					return html.replaceAll(
						/__ASTRO_IMAGE_="([^"]+)"/gm,
						(full, imagePath) => spreadAttributes({src: images[imagePath].src, ...images[imagePath].attributes})
					);
				}

				const html = updateImageReferences("<p>At work we’ve been in the process of building a queue-like component for helping our admins deal with various tasks. As fans of Google Inbox we decided to use it as a reference for many of our UX decisions. It was for this reason that I started down the long and treacherous path of trying to figure out exactly how Google Inbox works. I spent more time than I care to admit wading through compressed and mangle code, so I thought I share the small bits that I learned along the way.</p>\n<blockquote>\n<p>Disclaimer: I’m sure there are things that I’ve misunderstood or missed, so please don’t take each explanation as the complete truth.</p>\n</blockquote>\n<h2 id=\"the-setup\">The Setup</h2>\n<p>First, I just want to do a quick run-through of the kind of environment we’re dealing with here. Unfortunately, there is no “one weird trick” to emulate what I saw. It’s a complex choreography of time, CSS keyframes, and a bunch of Javascript.</p>\n<p>Like any old site, when you first load the page you’ll get a base payload of CSS and Javascript to get things started. The magic comes when you actually open a message. When this occurs, a new <code>style</code> tag is injected into the page. This <code>style</code> tag has the very specific responsibility of animating each messages on screen to its next position. The exact rules that are supplied will change depending various other bits of information: which message is being open or closed, the dimensions of each message, how many other messages are on the screen, etc. And practically as soon as the <code>style</code> tag is injected, it’s gone.</p>\n<figure>\n<img alt=\"Style Injection\" src=\"https://s3-us-west-2.amazonaws.com/npbee/2016/ux-case-study-google-inbox/style_injection.gif\">\n  <figcaption><strong>Figure 1:</strong> Notice the flashing style tag right before the body</figcaption>\n</figure>\n<p>Here’s a sampling of the kind of style rules that are injected:</p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #B392F0\">.t</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #B392F0\">.top-level-item</span><span style=\"color: #E1E4E8\">[</span><span style=\"color: #B392F0\">data-item-id-qs</span><span style=\"color: #F97583\">=</span><span style=\"color: #9ECBFF\">\"qs-gmail-thread-f-1526179305444074125-0\"</span><span style=\"color: #E1E4E8\">]</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">></span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">.V</span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">display</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">block</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">height</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">50</span><span style=\"color: #F97583\">px</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">left</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">0</span><span style=\"color: #F97583\">px</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">opacity</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">0.9999</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">-webkit-transform-origin</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">center</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">top</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">width</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">889</span><span style=\"color: #F97583\">px</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">will-change</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">-webkit-transform</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">-webkit-animation-name</span><span style=\"color: #E1E4E8\">: swap-close-placeholder-fake-shadow-var-84,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    animation-placeholder-fake-shadow-swap;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">@-webkit-keyframes</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #FFAB70\">swap-close-placeholder-fake-shadow-var-84</span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #B392F0\">0%</span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #79B8FF\">-webkit-transform</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">translate</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #79B8FF\">0</span><span style=\"color: #F97583\">px</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #79B8FF\">0</span><span style=\"color: #F97583\">px</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #79B8FF\">scale</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #79B8FF\">1.0517435320584927</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #79B8FF\">27.34</span><span style=\"color: #E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #B392F0\">80%</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #B392F0\">100%</span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #79B8FF\">-webkit-transform</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">translate</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #79B8FF\">0</span><span style=\"color: #F97583\">px</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #79B8FF\">0</span><span style=\"color: #F97583\">px</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #79B8FF\">scale</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #79B8FF\">1.0022497187851518</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #79B8FF\">1.00001</span><span style=\"color: #E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">.t</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #B392F0\">.top-level-item</span><span style=\"color: #E1E4E8\">[</span><span style=\"color: #B392F0\">data-item-id-qs</span><span style=\"color: #F97583\">=</span><span style=\"color: #9ECBFF\">\"qs-gmail-thread-f-1526179305444074125-0\"</span><span style=\"color: #E1E4E8\">]</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">></span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">.U</span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">display</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">block</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">height</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">48</span><span style=\"color: #F97583\">px</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">left</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">0</span><span style=\"color: #F97583\">px</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">opacity</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">0.9999</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">-webkit-transform-origin</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">center</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">top</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">width</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">889</span><span style=\"color: #F97583\">px</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">will-change</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">-webkit-transform</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">-webkit-animation-name</span><span style=\"color: #E1E4E8\">: swap-close-placeholder-var-84;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">@-webkit-keyframes</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #FFAB70\">swap-close-placeholder-var-84</span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #B392F0\">0%</span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #79B8FF\">-webkit-transform</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">translate</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #79B8FF\">0</span><span style=\"color: #F97583\">px</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #79B8FF\">0</span><span style=\"color: #F97583\">px</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #79B8FF\">scale</span><span style=\"color: #E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        </span><span style=\"color: #79B8FF\">1.044994375703037</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        </span><span style=\"color: #79B8FF\">28.354166666666668</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      );</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #B392F0\">80%</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #B392F0\">100%</span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #79B8FF\">-webkit-transform</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">translate</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #79B8FF\">0</span><span style=\"color: #F97583\">px</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #79B8FF\">0</span><span style=\"color: #F97583\">px</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #79B8FF\">scale</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #79B8FF\">1.00001</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #79B8FF\">1.00001</span><span style=\"color: #E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">}</span></span></code></pre>\n<p>Notice that the CSS is targeting specific elements with extremely precise animation measurements. These are not rules that a human would write. These are rules that are most likely generated by an application of some sort. The rules are also armed with exact width and height measurements. If you’ve ever tried to animate height, you’ve no doubt felt some pain as it’s not easy. Knowing the exact height of the element you’re trying to animate makes a huge difference and Google Inbox takes full advantage.</p>\n<h2 id=\"a-few-examples\">A Few Examples</h2>\n<p>Now that we have a general idea of the kind of setup we’re dealing with, let’s dive into a few examples.</p>\n<h3 id=\"the-fixed-header\">The Fixed Header</h3>\n<p>We’ll start with the simplest of the three: the fixed message header. This one is not particularly novel, but has a slight twist to make it interesting. The basic idea is that when a message is open, it’s header sticks to the top of the page as you scroll past it:</p>\n<figure>\n<img alt=\"Fixed Header A\" src=\"https://s3-us-west-2.amazonaws.com/npbee/2016/ux-case-study-google-inbox/fixed_header_a.gif\">\n</figure>\n<p>This is done pretty much as you might expect. Javascript listens for the position of the top of the header message and once it’s been scrolled past the top the of the viewport, its position is fixed. A small detail here is that there is also a “pusher” div that makes sure to push the message contents down once the message header is fixed. This is needed because a fixed element removes it from the flow of the page, so the contents below it would have otherwise popped up. Here’s what I mean:</p>\n<figure>\n<img alt=\"Fixed Header - No Pusher\" src=\"https://s3-us-west-2.amazonaws.com/npbee/2016/ux-case-study-google-inbox/fixed_header_b.gif\">\n\t<figcaption><strong>Figure 2:</strong> Notice how the messages contents jump when the header becomes fixed.</figcaption>\n</figure>\n<p>The twist is that the header will also switch to absolute positioning once you get to the point where the bottom of the header is the same as the bottom of the message. This gives a nice transition between fixed back to static, rather than just jumping straight back to static.</p>\n<img alt=\"Fixed Header - Absolute\" src=\"https://s3-us-west-2.amazonaws.com/npbee/2016/ux-case-study-google-inbox/fixed_header_c.gif\">\n<p>I’ve put together an example implementation on Codepen:</p>\n<div class=\"embed\">\n<div data-height=\"520\" data-theme-id=\"0\" data-slug-hash=\"bpGrmm\" data-default-tab=\"result\" data-user=\"npbee\" data-embed-version=\"2\" data-pen-title=\"Google Inbox -  Fixed Header\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/npbee/pen/bpGrmm/\">Google Inbox -  Fixed Header</a> by Nick Ball (<a href=\"https://codepen.io/npbee\">@npbee</a>) on <a href=\"https://codepen.io\">CodePen</a>.</div>\n</div>\n<h3 id=\"the-message-open\">The Message Open</h3>\n<p>Now things get a bit trickier. First, a quick visual of the animation:</p>\n<figure>\n<img alt=\"Message Open\" src=\"https://s3-us-west-2.amazonaws.com/npbee/2016/ux-case-study-google-inbox/message_open.gif\">\n</figure>\n<p>While this might look like a simple height and width animation, I assure you it’s not. What’s happening here involves timing a few different keyframe animations together as one. Keep in mind that the actual contents of the messages are completely hidden while the message is closed, as in <code>display: none</code>.</p>\n<p>First, there is a <code>div</code> in the markup that’s sole purpose is to do a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale\">scale</a> animation when the message is opening. A scale animation is an interesting choice because it has no effect on the document flow, meaning that you can scale an element to 200% and the elements around won’t budge. So in order to give the effect that the height of the message is increasing as the message is opening, you have to actually translate any messages below it <em>down</em> the page. This will be more relevant in the next section. The scale animation is also interesting because it’s essentially emulating a height animation of sorts. The “pusher” <code>div</code> scales to the point where its height is exactly the height of the incoming message content. This is where knowing the exact dimensions comes in handy.</p>\n<p>Once the “scaler” div has done its thing, the content is brought into the DOM and begins to fade in. At this point, the flow of the document is restored and since everything was done to exact specificity, there’s not jumpiness with any other <code>div</code>’s that had been moved out of the way for the scale animation.</p>\n<p>I’ll be going into more detail next about the translating, but here’s a sample implantation on Codepen:</p>\n<p class=\"codepen\" data-height=\"520\" data-default-tab=\"result\" data-slug-hash=\"ZWEJRg\" data-user=\"npbee\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/npbee/pen/ZWEJRg\">\n  Google Inbox -  Open Message</a> by Nick Ball (<a href=\"https://codepen.io/npbee\">@npbee</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<div data-height=\"520\" data-theme-id=\"0\" data-slug-hash=\"ZWEJRg\" data-default-tab=\"result\" data-user=\"npbee\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/npbee/pen/ZWEJRg/\">Google Inbox -  Open Message</a> by Nick Ball (<a href=\"http://codepen.io/npbee\">@npbee</a>) on <a href=\"http://codepen.io\">CodePen</a>.</div>\n<h2 id=\"the-message-swap\">The Message Swap</h2>\n<p>Now we get to the wild and crazy stuff, the message swap:</p>\n<figure>\n<img alt=\"message swap\" src=\"https://s3-us-west-2.amazonaws.com/npbee/2016/ux-case-study-google-inbox/message_swap.gif\">\n</figure>\n<p>So, why is this interesting? To be honest, I wasn’t sure it was all that interesting myself until I actually tried implementing it. The first thing to notice is that it looks as if the opening message is animating its height in reverse. This is the what a natural height animation would look like. If you were to animate the second message’s height normally, it flow downwards increase the overall height of the page. The second interesting thing that’s not very visible in the above gif, is the scroll position.</p>\n<p>Take a look at this one (I have to speed up the animations for this to work):</p>\n<figure>\n<img alt=\"scroll position\" src=\"https://s3-us-west-2.amazonaws.com/npbee/2016/ux-case-study-google-inbox/message_swap_b.gif\">\n</figure>\n<p>In this gif, I’ve already scrolled way down the page and I’m now opening the second message. If you imagine what would happen in the normal document flow, the first message would close and the page’s height would be substantially decreased, bringing the element below with it up the page. We’d open to somewhere in the middle of the second message. Instead, the scroll position appears to stay the exactly the same, the first messages closes, and the second message opens right in place. This is an example of a completely natural feeling animation that is extremely <em>unnatural</em> to implement.</p>\n<p>So how’s it done? In short, the CSS <code>translate</code> transform. But this is also another example of multiple animations being coordinated together to appear as one smooth interaction. As the first message is closing, it’s <code>translateY</code> position is being animated from 0 up to the point where it would be visible on the screen at the current scroll position. Meaning, if the first message were above the viewport by 200px, we’d animate from <code>translateY(0px)</code> to <code>translateY(200px)</code> to bring it in view. Simultaneously, the second message’s <code>translateY</code> property is animated from the offset created from the first message closing <em>down</em> to the point where it needs to end up on the screen. All the while each message’s “scaler” divs are doing their thing. All of this put together makes it look these divs are basically animating their height without the page moving at all.</p>\n<p>But just those animations wouldn’t be enough. The last missing piece here is the scroll position. In this scenario, once we’re done animating we’ve actually translated all of the content forward with the <code>translateY</code> property. So technically you could scroll up in the page and see a bunch of blank space. And since these animations are only temporary (remember the style is injected and then removed once the animations are done), the page contents will jump up once styles are removed because they don’t have the <code>translateY</code> values that were applied. This is obviously no good. The solution is to manually set the scroll position forward the <em>exact</em> amount that the page contents were translated. Because we’re dealing with exact calculations, doing this immediately before the injected styles are removed does not result in any page jumps and essentially resets the page to a fresh state.</p>\n<p>I’ve tried to narrow down the concepts to an implementation here (click the second message):</p>\n<p class=\"codepen\" data-height=\"395\" data-default-tab=\"result\" data-slug-hash=\"wMLgRY\" data-user=\"npbee\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/npbee/pen/wMLgRY\">\n  Google Inbox -  Message Swap</a> by Nick Ball (<a href=\"https://codepen.io/npbee\">@npbee</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>Notice the two messages translating up and down and the scroll bar hopping up at the very last second once the animations are done.</p>\n<p>In attempt to make this more clear, I’ve made a step-able version here:</p>\n<p class=\"codepen\" data-height=\"554\" data-default-tab=\"result\" data-slug-hash=\"ONJQMa\" data-user=\"npbee\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/npbee/pen/ONJQMa\">\n  Google Inbox -  Message Swap Stepper</a> by Nick Ball (<a href=\"https://codepen.io/npbee\">@npbee</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<p>Note that I’m calling these “steps” but really these all happen pretty much simultaneously.</p>\n<h2 id=\"takeaways\">Takeaways</h2>\n<p>I’m sure you’re wondering why I wasted so much time on this. I wondered that myself plenty of times, but came away with a few solid learnings:</p>\n<p><strong>Debugging Google code is hard.</strong></p>\n<p>Like any quality production app, Google Inbox’s output code is not meant to be readable. But Google really seems to go the extra mile with minified class names and injected style. They are building for scale and not for people like me to be able to decipher what’s happening in their web apps.</p>\n<p><strong>Subtlety is king.</strong></p>\n<p>Most of the animations are incredibly subtle. Like <em>really</em> subtle. They are the sort of animations that you don’t really know are there until you do. Additionally, many of these animations have a very fast duration. So after all of the work to achieve these animations, they’re gone in an instant. I think it’s a nice display of restraint by the designers. In the same situation, I could see myself wanting to show off all of these wonderful animations I had built.</p>\n<p>On the flip side of the above, I did see a bunch of injected code that was essentially worthless. I doubt that animating a div from <code>translateY(0, 0.000122)</code> to <code>translateY(0, 0.00011)</code> is actually perceivable to a real person. The amount of times where these extremely small animations are introduced, I’m not sure, but there is probably a tradeoff there somewhere.</p>\n<p><strong>Google takes their animations seriously.</strong></p>\n<p>I don’t consider myself well-versed in UX design, but it was quite fascinating to see just a glimpse of the amount of work it takes to get the level of polish that Google Inbox has. As I mentioned earlier, there are probably some non-humans writing at least part of the actual code that makes the animations run, but there are definitely humans <em>designing</em> the animations. The interactions seemed to be envisioned first with the implementation details worked out later in whatever way was necessary, which is opposite of how I usually think about these things. I’m not sure I’ll ever have the resources at my disposal to build animations at this level of detail, but it was an impressive reminder that user experience is the ultimate goal and we should do whatever it takes to make it great.</p>");

				const frontmatter = {"title":"UX Case Study: Google Inbox","date":"2016-02-27T00:00:00.000Z","description":"A hard look at one of my favorite interaction patterns"};
				const file = "/Users/nickball/code/npb/src/content/blog/ux-case-study-google-inbox.md";
				const url = undefined;
				function rawContent() {
					return "\nAt work we’ve been in the process of building a queue-like component for helping our admins deal with various tasks. As fans of Google Inbox we decided to use it as a reference for many of our UX decisions. It was for this reason that I started down the long and treacherous path of trying to figure out exactly how Google Inbox works. I spent more time than I care to admit wading through compressed and mangle code, so I thought I share the small bits that I learned along the way.\n\n> Disclaimer: I’m sure there are things that I’ve misunderstood or missed, so please don’t take each explanation as the complete truth.\n\n## The Setup\n\nFirst, I just want to do a quick run-through of the kind of environment we’re dealing with here. Unfortunately, there is no “one weird trick” to emulate what I saw. It’s a complex choreography of time, CSS keyframes, and a bunch of Javascript.\n\nLike any old site, when you first load the page you’ll get a base payload of CSS and Javascript to get things started. The magic comes when you actually open a message. When this occurs, a new `style` tag is injected into the page. This `style` tag has the very specific responsibility of animating each messages on screen to its next position. The exact rules that are supplied will change depending various other bits of information: which message is being open or closed, the dimensions of each message, how many other messages are on the screen, etc. And practically as soon as the `style` tag is injected, it’s gone.\n\n<figure>\n<img alt=\"Style Injection\" src=\"https://s3-us-west-2.amazonaws.com/npbee/2016/ux-case-study-google-inbox/style_injection.gif\" />\n  <figcaption><strong>Figure 1:</strong> Notice the flashing style tag right before the body</figcaption>\n</figure>\n\nHere’s a sampling of the kind of style rules that are injected:\n\n```css\n.t\n  .top-level-item[data-item-id-qs=\"qs-gmail-thread-f-1526179305444074125-0\"]\n  > .V {\n  display: block;\n  height: 50px;\n  left: 0px;\n  opacity: 0.9999;\n  -webkit-transform-origin: center top;\n  width: 889px;\n  will-change: -webkit-transform;\n  -webkit-animation-name: swap-close-placeholder-fake-shadow-var-84,\n    animation-placeholder-fake-shadow-swap;\n}\n\n@-webkit-keyframes swap-close-placeholder-fake-shadow-var-84 {\n  0% {\n    -webkit-transform: translate(0px, 0px) scale(1.0517435320584927, 27.34);\n  }\n\n  80%,\n  100% {\n    -webkit-transform: translate(0px, 0px) scale(1.0022497187851518, 1.00001);\n  }\n}\n\n.t\n  .top-level-item[data-item-id-qs=\"qs-gmail-thread-f-1526179305444074125-0\"]\n  > .U {\n  display: block;\n  height: 48px;\n  left: 0px;\n  opacity: 0.9999;\n  -webkit-transform-origin: center top;\n  width: 889px;\n  will-change: -webkit-transform;\n  -webkit-animation-name: swap-close-placeholder-var-84;\n}\n\n@-webkit-keyframes swap-close-placeholder-var-84 {\n  0% {\n    -webkit-transform: translate(0px, 0px) scale(\n        1.044994375703037,\n        28.354166666666668\n      );\n  }\n\n  80%,\n  100% {\n    -webkit-transform: translate(0px, 0px) scale(1.00001, 1.00001);\n  }\n}\n```\n\nNotice that the CSS is targeting specific elements with extremely precise animation measurements. These are not rules that a human would write. These are rules that are most likely generated by an application of some sort. The rules are also armed with exact width and height measurements. If you’ve ever tried to animate height, you’ve no doubt felt some pain as it’s not easy. Knowing the exact height of the element you’re trying to animate makes a huge difference and Google Inbox takes full advantage.\n\n## A Few Examples\n\nNow that we have a general idea of the kind of setup we’re dealing with, let’s dive into a few examples.\n\n### The Fixed Header\n\nWe’ll start with the simplest of the three: the fixed message header. This one is not particularly novel, but has a slight twist to make it interesting. The basic idea is that when a message is open, it’s header sticks to the top of the page as you scroll past it:\n\n<figure>\n<img alt=\"Fixed Header A\" src=\"https://s3-us-west-2.amazonaws.com/npbee/2016/ux-case-study-google-inbox/fixed_header_a.gif\" />\n</figure>\n\nThis is done pretty much as you might expect. Javascript listens for the position of the top of the header message and once it’s been scrolled past the top the of the viewport, its position is fixed. A small detail here is that there is also a “pusher” div that makes sure to push the message contents down once the message header is fixed. This is needed because a fixed element removes it from the flow of the page, so the contents below it would have otherwise popped up. Here’s what I mean:\n\n<figure>\n<img alt=\"Fixed Header - No Pusher\" src=\"https://s3-us-west-2.amazonaws.com/npbee/2016/ux-case-study-google-inbox/fixed_header_b.gif\" />\n\t<figcaption><strong>Figure 2:</strong> Notice how the messages contents jump when the header becomes fixed.</figcaption>\n</figure>\n\nThe twist is that the header will also switch to absolute positioning once you get to the point where the bottom of the header is the same as the bottom of the message. This gives a nice transition between fixed back to static, rather than just jumping straight back to static.\n\n<img alt=\"Fixed Header - Absolute\" src=\"https://s3-us-west-2.amazonaws.com/npbee/2016/ux-case-study-google-inbox/fixed_header_c.gif\" />\n\nI’ve put together an example implementation on Codepen:\n\n<div className='embed'>\n<div data-height=\"520\" data-theme-id=\"0\" data-slug-hash=\"bpGrmm\" data-default-tab=\"result\" data-user=\"npbee\" data-embed-version=\"2\" data-pen-title=\"Google Inbox -  Fixed Header\" className=\"codepen\">See the Pen <a href=\"https://codepen.io/npbee/pen/bpGrmm/\">Google Inbox -  Fixed Header</a> by Nick Ball (<a href=\"https://codepen.io/npbee\">@npbee</a>) on <a href=\"https://codepen.io\">CodePen</a>.</div>\n</div>\n\n### The Message Open\n\nNow things get a bit trickier. First, a quick visual of the animation:\n\n<figure>\n<img alt=\"Message Open\" src=\"https://s3-us-west-2.amazonaws.com/npbee/2016/ux-case-study-google-inbox/message_open.gif\" />\n</figure>\n\nWhile this might look like a simple height and width animation, I assure you it’s not. What’s happening here involves timing a few different keyframe animations together as one. Keep in mind that the actual contents of the messages are completely hidden while the message is closed, as in `display: none`.\n\nFirst, there is a `div` in the markup that’s sole purpose is to do a [scale](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale) animation when the message is opening. A scale animation is an interesting choice because it has no effect on the document flow, meaning that you can scale an element to 200% and the elements around won’t budge. So in order to give the effect that the height of the message is increasing as the message is opening, you have to actually translate any messages below it _down_ the page. This will be more relevant in the next section. The scale animation is also interesting because it’s essentially emulating a height animation of sorts. The “pusher” `div` scales to the point where its height is exactly the height of the incoming message content. This is where knowing the exact dimensions comes in handy.\n\nOnce the “scaler” div has done its thing, the content is brought into the DOM and begins to fade in. At this point, the flow of the document is restored and since everything was done to exact specificity, there’s not jumpiness with any other `div`’s that had been moved out of the way for the scale animation.\n\nI’ll be going into more detail next about the translating, but here’s a sample implantation on Codepen:\n\n<p class=\"codepen\" data-height=\"520\" data-default-tab=\"result\" data-slug-hash=\"ZWEJRg\" data-user=\"npbee\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/npbee/pen/ZWEJRg\">\n  Google Inbox -  Open Message</a> by Nick Ball (<a href=\"https://codepen.io/npbee\">@npbee</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n<div data-height=\"520\" data-theme-id=\"0\" data-slug-hash=\"ZWEJRg\" data-default-tab=\"result\" data-user=\"npbee\" className='codepen'>See the Pen <a href='http://codepen.io/npbee/pen/ZWEJRg/'>Google Inbox -  Open Message</a> by Nick Ball (<a href='http://codepen.io/npbee'>@npbee</a>) on <a href='http://codepen.io'>CodePen</a>.</div>\n\n## The Message Swap\n\nNow we get to the wild and crazy stuff, the message swap:\n\n<figure>\n<img alt=\"message swap\" src=\"https://s3-us-west-2.amazonaws.com/npbee/2016/ux-case-study-google-inbox/message_swap.gif\" />\n</figure>\n\nSo, why is this interesting? To be honest, I wasn’t sure it was all that interesting myself until I actually tried implementing it. The first thing to notice is that it looks as if the opening message is animating its height in reverse. This is the what a natural height animation would look like. If you were to animate the second message’s height normally, it flow downwards increase the overall height of the page. The second interesting thing that’s not very visible in the above gif, is the scroll position.\n\nTake a look at this one (I have to speed up the animations for this to work):\n\n<figure>\n<img alt=\"scroll position\" src=\"https://s3-us-west-2.amazonaws.com/npbee/2016/ux-case-study-google-inbox/message_swap_b.gif\" />\n</figure>\n\nIn this gif, I’ve already scrolled way down the page and I’m now opening the second message. If you imagine what would happen in the normal document flow, the first message would close and the page’s height would be substantially decreased, bringing the element below with it up the page. We’d open to somewhere in the middle of the second message. Instead, the scroll position appears to stay the exactly the same, the first messages closes, and the second message opens right in place. This is an example of a completely natural feeling animation that is extremely _unnatural_ to implement.\n\nSo how’s it done? In short, the CSS `translate` transform. But this is also another example of multiple animations being coordinated together to appear as one smooth interaction. As the first message is closing, it’s `translateY` position is being animated from 0 up to the point where it would be visible on the screen at the current scroll position. Meaning, if the first message were above the viewport by 200px, we’d animate from `translateY(0px)` to `translateY(200px)` to bring it in view. Simultaneously, the second message’s `translateY` property is animated from the offset created from the first message closing _down_ to the point where it needs to end up on the screen. All the while each message’s “scaler” divs are doing their thing. All of this put together makes it look these divs are basically animating their height without the page moving at all.\n\nBut just those animations wouldn’t be enough. The last missing piece here is the scroll position. In this scenario, once we’re done animating we’ve actually translated all of the content forward with the `translateY` property. So technically you could scroll up in the page and see a bunch of blank space. And since these animations are only temporary (remember the style is injected and then removed once the animations are done), the page contents will jump up once styles are removed because they don’t have the `translateY` values that were applied. This is obviously no good. The solution is to manually set the scroll position forward the _exact_ amount that the page contents were translated. Because we’re dealing with exact calculations, doing this immediately before the injected styles are removed does not result in any page jumps and essentially resets the page to a fresh state.\n\nI’ve tried to narrow down the concepts to an implementation here (click the second message):\n\n<p class=\"codepen\" data-height=\"395\" data-default-tab=\"result\" data-slug-hash=\"wMLgRY\" data-user=\"npbee\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/npbee/pen/wMLgRY\">\n  Google Inbox -  Message Swap</a> by Nick Ball (<a href=\"https://codepen.io/npbee\">@npbee</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\nNotice the two messages translating up and down and the scroll bar hopping up at the very last second once the animations are done.\n\nIn attempt to make this more clear, I’ve made a step-able version here:\n\n<p class=\"codepen\" data-height=\"554\" data-default-tab=\"result\" data-slug-hash=\"ONJQMa\" data-user=\"npbee\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/npbee/pen/ONJQMa\">\n  Google Inbox -  Message Swap Stepper</a> by Nick Ball (<a href=\"https://codepen.io/npbee\">@npbee</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\nNote that I’m calling these “steps” but really these all happen pretty much simultaneously.\n\n## Takeaways\n\nI’m sure you’re wondering why I wasted so much time on this. I wondered that myself plenty of times, but came away with a few solid learnings:\n\n**Debugging Google code is hard.**\n\nLike any quality production app, Google Inbox’s output code is not meant to be readable. But Google really seems to go the extra mile with minified class names and injected style. They are building for scale and not for people like me to be able to decipher what’s happening in their web apps.\n\n**Subtlety is king.**\n\nMost of the animations are incredibly subtle. Like _really_ subtle. They are the sort of animations that you don’t really know are there until you do. Additionally, many of these animations have a very fast duration. So after all of the work to achieve these animations, they’re gone in an instant. I think it’s a nice display of restraint by the designers. In the same situation, I could see myself wanting to show off all of these wonderful animations I had built.\n\nOn the flip side of the above, I did see a bunch of injected code that was essentially worthless. I doubt that animating a div from `translateY(0, 0.000122)` to `translateY(0, 0.00011)` is actually perceivable to a real person. The amount of times where these extremely small animations are introduced, I’m not sure, but there is probably a tradeoff there somewhere.\n\n**Google takes their animations seriously.**\n\nI don’t consider myself well-versed in UX design, but it was quite fascinating to see just a glimpse of the amount of work it takes to get the level of polish that Google Inbox has. As I mentioned earlier, there are probably some non-humans writing at least part of the actual code that makes the animations run, but there are definitely humans _designing_ the animations. The interactions seemed to be envisioned first with the implementation details worked out later in whatever way was necessary, which is opposite of how I usually think about these things. I’m not sure I’ll ever have the resources at my disposal to build animations at this level of detail, but it was an impressive reminder that user experience is the ultimate goal and we should do whatever it takes to make it great.\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"the-setup","text":"The Setup"},{"depth":2,"slug":"a-few-examples","text":"A Few Examples"},{"depth":3,"slug":"the-fixed-header","text":"The Fixed Header"},{"depth":3,"slug":"the-message-open","text":"The Message Open"},{"depth":2,"slug":"the-message-swap","text":"The Message Swap"},{"depth":2,"slug":"takeaways","text":"Takeaways"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, images, rawContent, url };
